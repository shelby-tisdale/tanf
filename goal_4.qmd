---
title: "Goal 4"
author: "Shelby Tisdale"
format: html
editor: visual
---

# Load Data and Packages

```{r}
#| label: load-packages
library(tidyverse)
library(data.table)
library(bit64)
library(janitor)
library(gt)
library(gtsummary)
```

```{r}
#| label: load-full-data
all_goals <- read_csv("data/sipp_all_goals.csv")
```

# Description

**Goal:** Encourage the formation and maintenance of two-parent families.

**Participants:** Households with children and at least one parent

**Criteria:** one parent family is two-parent family at end of reference period, two-parent family is still two-parent family

# Aggregate Dataset

```{r}

# calculate number of years each hh is in study
hh_years <- all_goals |>
  select(household_id, state, year) |>
  distinct() |>
  count(household_id) |>
  rename(n_years = n)

# create race and sex of householder variables
hh_demogs <- all_goals |>
  filter(is_householder == 1) |>
  filter(in_goal4 == 1) |>
  group_by(household_id, state) |>
  mutate(first_year = min(fiscal_year)) |>
  filter(fiscal_year == first_year) |>
  select(household_id, state, race, sex) |>
  distinct()

goal4 <- all_goals |>
  filter(in_goal4 == 1) |>
  select(goal4, household_id, fiscal_year, state, pct_unobligated, pct_basic_assistance, tanf_amt_received) |>
  group_by(household_id, state, goal4) |>
  mutate(
    tanf_amt_received = sum(tanf_amt_received)) |>
  filter(fiscal_year == min(fiscal_year)) |>
  ungroup() |>
  distinct() |>
  left_join(hh_years, by = "household_id") |>
  left_join(hh_demogs, by = c("household_id", "state")) |>
  mutate(
    pct_unobligated = pct_unobligated*100,
         pct_basic_assistance = pct_basic_assistance*100
  )

```

# Table 1

# EDA

# Modeling

```{r}
set.seed(812)

goal4_split <- initial_split(goal4)
goal4_train <- training(goal4_split)
goal4_test <- testing(goal4_split)

# tune prior
goal_4_model_1_prior <- stan_glmer(
  goal4 ~ pct_unobligated + pct_basic_assistance + n_years + race + sex + tanf_amt_received + (1 | fiscal_year) + (1 | state),
  data = goal4_train, family = binomial,
  prior_intercept = normal(0, 2.5, autoscale = TRUE),
  prior = normal(0, 2.5, autoscale = TRUE),
  prior_covariance = decov(reg = 1, conc = 1, shape = 1, scale = 1),
  chain = 10, iter = 10000, seed = 12345,
  prior_PD = TRUE)

# summarize prior
prior_summary(goal_4_model_1_prior)
tidy(goal_4_model_1_prior)

# model results
goal_4_model_1 <- update(goal_4_model_1_prior, prior_PD = FALSE)
goal_4_model_1_summary <- tidy(goal_4_model_1, effects = "fixed", conf.int = TRUE, conf.level = .95)
goal_4_model_1_summary |>
  mutate(odd_ratio = exp(estimate),
         conf.low_or = exp(conf.low),
         conf.high_or = exp(conf.high)) |>
  select(term, odd_ratio, conf.low_or, conf.high_or)

saveRDS(goal_4_model_1, "data/goal_4_model_1.rds")
params <- get_variables(goal_4_model_1)

# model diagnostics
for (i in 1:length(params)) {
  print(mcmc_trace(goal_4_model_1, pars = params[[i]]))
}

for (i in 1:length(params)) {
  print(mcmc_dens_overlay(goal_4_model_1, pars = params[[i]]))
}

for (i in 1:length(params)) {
  print(mcmc_acf(goal_4_model_1, pars = params[[i]]))
}

neff_ratio(goal_4_model_1)
rhat(goal_4_model_1)
prop_goal4 <- function(x){mean(x == 1)}
pp_check(goal_4_model_1, nreps = 100, plotfun = "stat", stat = "prop_goal3")
```

# Results
